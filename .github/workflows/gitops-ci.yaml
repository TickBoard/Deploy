name: gitops-ci

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - "gitops/**"
  push:
    branches: [ "main" ]
    paths:
      - "gitops/**"

concurrency:
  group: gitops-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubeconform
        run: |
          set -euo pipefail
          curl -sSL -o kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz
          tar -xzf kubeconform.tar.gz kubeconform
          sudo mv kubeconform /usr/local/bin/
          kubeconform -v

      - name: Install kustomize
        run: |
          set -euo pipefail
          curl -sSL -o kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v5.4.1/kustomize_v5.4.1_linux_amd64.tar.gz
          tar -xzf kustomize.tar.gz kustomize
          sudo mv kustomize /usr/local/bin/
          kustomize version

      - name: Validate Kustomize overlays and bases
        shell: bash
        run: |
          set -euo pipefail

          validate_build() {
            local dir="$1"
            echo "\n=== Validating build: $dir ==="
            if ! kustomize build "$dir" | kubeconform -strict -ignore-missing-schemas -summary -; then
              echo "Validation failed for: $dir" >&2
              return 1
            fi
          }

          mapfile -d '' OVERLAYS < <(find gitops/stacks -type f -path '*/overlays/*/kustomization.yaml' -print0 || true)
          if [[ ${#OVERLAYS[@]} -gt 0 ]]; then
            for k in "${OVERLAYS[@]}"; do
              validate_build "$(dirname "$k")"
            done
          else
            echo "No overlays found under gitops/stacks/**/overlays/*" >&2
          fi

          mapfile -d '' BASES < <(find gitops/stacks -type f -path '*/base/kustomization.yaml' -print0 || true)
          if [[ ${#BASES[@]} -gt 0 ]]; then
            for k in "${BASES[@]}"; do
              validate_build "$(dirname "$k")"
            done
          fi

  deploy:
    needs: [validate]
    if: ${{ github.event_name == 'push' && needs.validate.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_GHA_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set kubectl context for EKS
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
        run: |
          set -euo pipefail
          if [ -z "${AWS_REGION:-}" ] || [ -z "${EKS_CLUSTER_NAME:-}" ]; then
            echo "AWS_REGION and/or EKS_CLUSTER_NAME repo variables are not set" >&2
            exit 1
          fi
          aws sts get-caller-identity
          aws eks update-kubeconfig --region "$AWS_REGION" --name "$EKS_CLUSTER_NAME"
          kubectl version --client

      - name: Ensure tickboard namespace exists
        run: |
          set -euo pipefail
          kubectl get ns tickboard >/dev/null 2>&1 || kubectl create namespace tickboard

      - name: Ensure Harbor image pull secret (optional)
        env:
          HARBOR_REGISTRY: ${{ secrets.HARBOR_REGISTRY }}
          HARBOR_USERNAME: ${{ secrets.HARBOR_USERNAME }}
          HARBOR_PASSWORD: ${{ secrets.HARBOR_PASSWORD }}
          HARBOR_EMAIL: ${{ secrets.HARBOR_EMAIL }}
        run: |
          set -euo pipefail
          if [[ -z "${HARBOR_USERNAME:-}" || -z "${HARBOR_PASSWORD:-}" ]]; then
            echo "Harbor credentials not provided; skipping imagePullSecret creation."
            exit 0
          fi
          server="${HARBOR_REGISTRY:-harbor.czhuang.dev}"
          email="${HARBOR_EMAIL:-ci@example.com}"
          kubectl -n tickboard create secret docker-registry harbor-pull-secret \
            --docker-server="$server" \
            --docker-username="$HARBOR_USERNAME" \
            --docker-password="$HARBOR_PASSWORD" \
            --docker-email="$email" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply AppProjects (bootstrap)
        run: |
          set -euo pipefail
          kubectl apply -f gitops/apps/projects/cluster.yaml
          kubectl apply -f gitops/apps/projects/apps.yaml

      - name: Apply root Application and ApplicationSet
        run: |
          set -euo pipefail
          kubectl apply -f gitops/apps/root-app.yaml
          kubectl apply -f gitops/apps/workloads-appset.yaml

      - name: Force Argo refresh of root-app (best-effort)
        run: |
          set -euo pipefail
          kubectl -n argocd patch application root-app \
            -p '{"metadata":{"annotations":{"argocd.argoproj.io/refresh":"hard"}}}' --type merge || true

      - name: Wait for root-app Healthy (best-effort)
        run: |
          set -euo pipefail
          kubectl -n argocd wait --for=jsonpath='{.status.health.status}'=Healthy application/root-app --timeout=10m || true
