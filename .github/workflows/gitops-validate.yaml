name: gitops-validate

on:
  pull_request:
    branches: [ "main" ]
    paths:
      - "gitops/**"
  push:
    branches: [ "main" ]
    paths:
      - "gitops/**"
  workflow_dispatch:

concurrency:
  group: gitops-validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  kubeconform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install kubeconform
        run: |
          set -euo pipefail
          curl -sSL -o kubeconform.tar.gz https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz
          tar -xzf kubeconform.tar.gz kubeconform
          sudo mv kubeconform /usr/local/bin/
          kubeconform -v

      - name: Install kustomize
        run: |
          set -euo pipefail
          curl -sSL -o kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v5.4.1/kustomize_v5.4.1_linux_amd64.tar.gz
          tar -xzf kustomize.tar.gz kustomize
          sudo mv kustomize /usr/local/bin/
          kustomize version

      - name: Validate Kustomize overlays and bases
        shell: bash
        run: |
          set -euo pipefail

          validate_build() {
            local dir="$1"
            echo "\n=== Validating build: $dir ==="
            if ! kustomize build "$dir" | kubeconform -strict -ignore-missing-schemas -summary -; then
              echo "Validation failed for: $dir" >&2
              return 1
            fi
          }

          # Validate all overlays
          mapfile -d '' OVERLAYS < <(find gitops/stacks -type f -path '*/overlays/*/kustomization.yaml' -print0 || true)
          if [[ ${#OVERLAYS[@]} -gt 0 ]]; then
            for k in "${OVERLAYS[@]}"; do
              validate_build "$(dirname "$k")"
            done
          else
            echo "No overlays found under gitops/stacks/**/overlays/*" >&2
          fi

          # Optionally validate bases too (useful for catching schema issues early)
          mapfile -d '' BASES < <(find gitops/stacks -type f -path '*/base/kustomization.yaml' -print0 || true)
          if [[ ${#BASES[@]} -gt 0 ]]; then
            for k in "${BASES[@]}"; do
              validate_build "$(dirname "$k")"
            done
          fi
